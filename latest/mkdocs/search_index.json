{
    "docs": [
        {
            "location": "/", 
            "text": "#\n\n\nBase.LinAlg.diff\n \n \nFunction\n.\n\n\ndiff(A::TimeAxisArray, k::Int=1)\n\n\n\n\nPerform \nk\nth order differencing across time observations in \nA\n.\n\n\n#\n\n\nBase.split\n \n \nFunction\n.\n\n\nsplit(A::TimeAxisArray, f::Function)\n\n\n\n\nReturns an array containing sequential fragments of \nA\n, split according to clusters of values in the mapping of \nf\n over the timestamps of \nA\n. \nsplit(f, A)\n is also defined so as to support do-notation.\n\n\n#\n\n\nTimeAxisArrays.collapse\n \n \nFunction\n.\n\n\ncollapse(A::TimeAxisArray, tsreducer::Function, reducer::Function=tsreducer)\n\n\n\n\nCollapses the timestamps of \nA\n to a single observation in the time dimension using \ntsreducer\n. Data is collapsed in the time dimension using \nreducer\n, which defaults to \ntsreducer\n.\n\n\n#\n\n\nTimeAxisArrays.downsample\n \n \nFunction\n.\n\n\ndownsample(A::TimeAxisArray, splitter::Function, tsreducer::Function, reducer::Function=tsreducer)\n\n\n\n\nCombines \nsplit\n, \ncollapse\n, and \nvcat\n to partition \nA\n according to sequential values in the mapping of \nsplitter\n over the timestamps of \nA\n, then collapses each of the split TimeAxisArrays according to \ntsreducer\n (for timestamps) and \nreducer\n (for data), before recombining the collapsed values.\n\n\n#\n\n\nTimeAxisArrays.dropif\n \n \nFunction\n.\n\n\ndropif(selector::Function, predicate::Function, A::TimeAxisArray)\n\n\n\n\nDrops observations at timestamps where \nselector\n (e.g. \nany\n, \nall\n) data values statisfy \npredicate\n.\n\n\n#\n\n\nTimeAxisArrays.dropnan\n \n \nFunction\n.\n\n\ndropnan(selector::Function, A::TimeAxisArray)\n\n\n\n\nDrops observations at timestamps where \nselector\n (e.g. \nany\n, \nall\n) data values are NaN. Equivalent to \ndropif(selector, isnan, A)\n\n\n#\n\n\nTimeAxisArrays.lag\n \n \nFunction\n.\n\n\nlag(A::TimeAxisArray, k::Int=1)\n\n\n\n\nShifts all observations in \nA\n later in time by \nk\n timestamps.\n\n\n#\n\n\nTimeAxisArrays.lead\n \n \nFunction\n.\n\n\nlead(A::TimeAxisArray, k::Int=1)\n\n\n\n\nShifts all observations in \nA\n earlier in time by \nk\n timestamps.\n\n\n#\n\n\nTimeAxisArrays.moving\n \n \nFunction\n.\n\n\nmoving(A::TimeAxisArray, reducer::Function, n::Int)\n\n\n\n\nApplies a time-wise reduction specified by \nreducer\n to a moving window of \nn\n observations, storing the result at the last timestamp in the window.\n\n\n#\n\n\nTimeAxisArrays.percentchange\n \n \nFunction\n.\n\n\npercentchange(A::TimeAxisArray; logdiff::Bool=false)\n\n\n\n\nComputes the percent change between observations in time in \nA\n. If \nlogdiff\n is true, returns the difference of log-transformed values.", 
            "title": "Home"
        }
    ]
}